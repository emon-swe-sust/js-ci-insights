name: Pull Request Lint Check

on:
  pull_request:
    types:
      - opened
      - edited
      - synchronize
      - reopened

permissions:
  pull-requests: read
  statuses: write # because of wip=true the action amannn/action-semantic-pull-request@v5 needs to write a status check https://github.com/amannn/action-semantic-pull-request/issues/249

jobs:
  title-lint:
    name: Validate title
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Load config
        id: load_config
        run: |
          # Load types and scopes directly from commitlint.config.mjs and set as environment variables
          node --experimental-modules -e "
            import('./commitlint.config.mjs').then(({ types, scopes }) => {
              // Write types and scopes as multiline environment variables
              console.log('TYPES<<EOF');
              console.log(types.join('\n'));
              console.log('EOF');
              
              console.log('SCOPES<<EOF');
              console.log(scopes.join('\n'));
              console.log('EOF');
            });
          " >> $GITHUB_ENV
          echo "Done!"

      - name: CI Check Title
        uses: amannn/action-semantic-pull-request@0723387faaf9b38adef4775cd42cfd5155ed6017 # v5.5.3
        # skip if the PR is comming from a forked repository
        # reason: the action needs the GITHUB_TOKEN to be able to comment on the PR
        #         and the secret is not available in forked repositories
        # if a PR comes from a forked repository we need to check the title manually
        # and comment on the PR with the result
        if: |
          github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          wip: true
          # Configure which types are allowed (newline-delimited).
          # Default: https://github.com/commitizen/conventional-commit-types
          types: |
            ${{ env.TYPES }}
          scopes: |
            ${{ env.SCOPES }}

          # Configure that a scope must always be provided.
          requireScope: true
          # Configure which scopes are disallowed in PR titles (newline-delimited).
          # For instance by setting the value below, `chore(release): ...` (lowercase)
          # and `ci(e2e,release): ...` (unknown scope) will be rejected.
          # These are regex patterns auto-wrapped in `^ $`.
          disallowScopes: |
            release
            [A-Z]+
          # Configure additional validation for the subject based on a regex.
          # This example ensures the subject doesn't start with an uppercase character.
          subjectPattern: ^(?![A-Z]).+$
          # If `subjectPattern` is configured, you can use this property to override
          # the default error message that is shown when the pattern doesn't match.
          # The variables `subject` and `title` can be used within the message.
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            didn't match the configured pattern. Please ensure that the subject
            doesn't start with an uppercase character.
          # If the PR contains one of these newline-delimited labels, the
          # validation is skipped. If you want to rerun the validation when
          # labels change, you might want to use the `labeled` and `unlabeled`
          # event triggers in your workflow.
          ignoreLabels: |
            bot
            ignore-semantic-pull-request
          # If you're using a format for the PR title that differs from the traditional Conventional
          # Commits spec, you can use these options to customize the parsing of the type, scope and
          # subject. The `headerPattern` should contain a regex where the capturing groups in parentheses
          # correspond to the parts listed in `headerPatternCorrespondence`.
          # See: https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-commits-parser#headerpattern
          headerPattern: '^(\w*)(?:\(([\w$.\-*/ ]*)\))?: (.*)$'
          headerPatternCorrespondence: type, scope, subject
