# In a previous step (see: ./k8s_skaffold_build.yml) we built the docker image for multiple
# architectures (e.g. amd64, arm64) in parallel on a GH runner for that specific architecture.
#
# The resulting build artifacts are multiple tagged single-architecture docker images, for example:
# - code-dot-org:my-branch-amd64
# - code-dot-org:my-branch-arm64
#
# This step uses `docker buildx imagetools` to stitch the single-architecture images into one final
# multi-platform docker image, for example:
# - code-dot-org:my-branch

name: k8s-stitch-multiplatform-image

on:
  workflow_call:
    inputs:
      docker_tags_json:
        description: "JSON object like: { docker_tag_amd64: $TAG_FOR_AMD64, ...etc... }"
        required: true
        type: string
      docker_tag:
        description: "Docker tag for the final multi-platform image e.g. code-dot-org:my-branch"
        required: true
        type: string

jobs:
  stitch-multi-platform:
    name: stitch multi-platform image

    # while we're experimental, we /never/ want to block a normal PR:
    continue-on-error: true

    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/code-dot-org
      MULTI_PLATFORM_IMAGE: ghcr.io/${{ github.repository_owner }}/code-dot-org:${{ inputs.docker_tag }}
    defaults:
      run:
        shell: bash -ex {0}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Parse docker_tags_json into a single shell variable listing each single-arch image:
      # SINGLE_ARCH_IMAGES="code-dot-org:my-branch-amd64 code-dot-org:my-branch-arm64"
      - name: Parse DOCKER_TAGS JSON into $SINGLE_ARCH_IMAGES
        id: parse_tags
        run: |
          # Use the passed JSON string directly
          DOCKER_TAGS_JSON='${{ inputs.docker_tags_json }}'
          SINGLE_ARCH_IMAGES=$(jq -r --arg prefix "$IMAGE_NAME" 'to_entries | map(select(.key | test("^docker_tag_")) | "\($prefix):\(.value)") | join(" ")' <<< "$DOCKER_TAGS_JSON")
          echo "SINGLE_ARCH_IMAGES=$SINGLE_ARCH_IMAGES" >> "$GITHUB_ENV"

      - name: Stitch platform images into a multi-platform image
        run: |
          # Use imagetools to stitch all platform-specific images into one multi-platform image
          # $MULTI_PLATFORM_IMAGE is the final multi-platform image name, e.g. code-dot-org:my-branch
          docker buildx imagetools create -t $MULTI_PLATFORM_IMAGE $SINGLE_ARCH_IMAGES
