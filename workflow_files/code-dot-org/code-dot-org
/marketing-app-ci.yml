name: Marketing-CI

on:
  workflow_call:
    inputs:
      BRANCHED_TESTING_ENABLED:
        type: boolean
        description: "Whether branched testing is enabled. Defaults to false"
        default: false
        required: false
      PR_HEAD_REF:
        type: string
        description: "The head ref of the pull request."
        required: false

defaults:
  run:
    shell: bash
    working-directory: ./frontend

jobs:
  dryrun-release:
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
          sparse-checkout: |
            frontend
            .github

      - name: Setup Frontend
        uses: ./.github/actions/frontend/setup

      - name: Dryrun Release
        run: yarn release:dryrun --filter @code-dot-org/marketing

  storybook-test:
    runs-on: ubuntu-24.04
    container:
      # Make sure to grab the latest version of the Playwright image
      # https://playwright.dev/docs/docker#pull-the-image
      image: mcr.microsoft.com/playwright:v1.49.1-noble
    steps:
      - name: Install git-lfs
        working-directory: ./
        run: |
          apt-get update && \
          apt-get install -y git-lfs 

      - uses: actions/checkout@v4
        with:
          lfs: true
          sparse-checkout: |
            frontend
            .github

      - name: Setup Frontend
        uses: ./.github/actions/frontend/setup

      - name: Build
        run: yarn build --filter @code-dot-org/marketing-storybook

      - name: Run tests
        env:
          PLAYWRIGHT_BROWSERS_PATH: /ms-playwright
        run: yarn workspace @code-dot-org/marketing-storybook test:ui:ci

  storybook-eyes:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
          sparse-checkout: |
            frontend
            .github

      - name: Setup Frontend
        uses: ./.github/actions/frontend/setup

      - name: Build
        run: yarn build --filter @code-dot-org/marketing-storybook

      - name: Run visual tests
        env:
          APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}
        run: yarn workspace @code-dot-org/marketing-storybook eyes-storybook

  build-docker:
    # Skip CI docker build if this is not a pull request.
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
          sparse-checkout: |
            frontend
            .github

      - name: Setup Frontend
        uses: ./.github/actions/frontend/setup
        with:
          INSTALL_DEPENDENCIES: false # We don't need to install dependencies for the Docker build.

      - name: Build Docker image
        id: build-docker-image
        uses: docker/build-push-action@v6.10.0
        with:
          context: frontend
          file: frontend/apps/marketing/Dockerfile
          tags: marketing:test
          push: false
          network: host # This is required for the `turbo` command to work properly in the Dockerfile.
          # Note TURBO_TOKEN is not a secret because we use a local turbo instance, it is stubbed out for future use only.
          build-args: |
            TURBO_TEAM=${{ vars.TURBO_REPO_TEAM }}
            TURBO_TOKEN=${{ secrets.TURBO_REPO_TOKEN }}
            TURBO_API=${{ vars.TURBO_REPO_API }}

      - name: Save Docker Image to Artifacts
        run: docker save marketing:test | zstd -T0 > marketing-test-${{ github.run_id }}.tar.zst

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          compression: 0
          name: marketing-test-${{ github.run_id }}.tar.zst
          path: frontend/marketing-test-${{ github.run_id }}.tar.zst

  ui-tests:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-24.04
    needs: build-docker

    strategy:
      fail-fast: false
      matrix:
        shardIndex: [1, 2, 3, 4]
        # shardTotal is used to determine how many shards there are in total.
        shardTotal: [4]

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
          sparse-checkout: |
            frontend
            .github

      - name: Setup Frontend
        uses: ./.github/actions/frontend/setup

      - name: Build
        run: yarn build --filter @code-dot-org/marketing

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: marketing-test-${{ github.run_id }}.tar.zst
          path: frontend

      - name: Extract Docker image artifact
        run: zstd -d marketing-test-${{ github.run_id }}.tar.zst

      - name: Load Docker image
        run: docker load -i marketing-test-${{ github.run_id }}.tar

      - name: Prepare Test Environment
        shell: bash
        run: |
          echo "CONTENTFUL_SPACE_ID=${{ vars.CONTENTFUL_SPACE_ID }}
          CONTENTFUL_ENV_ID=development
          CONTENTFUL_API_HOST=cdn.contentful.com
          CONTENTFUL_DELIVERY_TOKEN=${{ secrets.CONTENTFUL_DELIVERY_TOKEN }}
          CONTENTFUL_EXPERIENCE_CONTENT_TYPE_ID=experience
          CONTENTFUL_REVALIDATE_TOKEN=ci-revalidate-test
          DRAFT_MODE_TOKEN=ci-draft-mode
          HOSTNAME=0.0.0.0
          NEXT_PUBLIC_STAGE=development
          " > .env

      - name: Run Docker Container
        run: |
          docker run -d --env-file .env --rm --name marketing \
            --network=host \
            -e PORT=3001 \
            marketing:test
          
          # Tail the docker logs
          docker logs -f marketing &

      - name: UI Tests
        uses: ./.github/actions/frontend/marketing/ui-tests
        with:
          ENVIRONMENT_TYPE: pr
          CONTENTFUL_SPACE_ID: ${{ vars.CONTENTFUL_SPACE_ID }}
          CONTENTFUL_DELIVERY_TOKEN: ${{ secrets.CONTENTFUL_DELIVERY_TOKEN}}
          APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY}}
          DRAFT_MODE_TOKEN: ci-draft-mode
          BRANCHED_TESTING_ENABLED: ${{ inputs.BRANCHED_TESTING_ENABLED }}
          PR_HEAD_REF: ${{ inputs.PR_HEAD_REF }}
          SHARD_INDEX: ${{ matrix.shardIndex }}
          SHARD_TOTAL: ${{ matrix.shardTotal }}

  merge-reports:
    # Merge reports after playwright-tests, even if some shards have failed
    if: ${{ github.event_name == 'pull_request' && !cancelled() }}
    needs: [ ui-tests ]

    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
          sparse-checkout: |
            frontend
            .github

      - name: Merge Playwright Reports
        uses: ./.github/actions/frontend/merge-playwright-reports