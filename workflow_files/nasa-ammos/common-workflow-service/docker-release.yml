name: On-Demand Release Docker Build

on:
  release:
    types: [published] # Automatic trigger on new releases
  workflow_dispatch: # Manual trigger
    inputs:
      release_tag:
        description: "Release tag to build (e.g., v2.7.0, v2.6.1)"
        required: true
        type: string
      build_latest:
        description: "Also tag as latest?"
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  packages: write # Needed to push images to GHCR

jobs:
  build-and-push-release:
    runs-on: ubuntu-latest
    steps:
      - name: Determine release info
        id: release_info
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            # Automatic release trigger
            RELEASE_TAG="${{ github.event.release.tag_name }}"
            BUILD_LATEST="true"
            echo "source=automatic_release" >> $GITHUB_OUTPUT
          else
            # Manual workflow dispatch
            RELEASE_TAG="${{ github.event.inputs.release_tag }}"
            BUILD_LATEST="${{ github.event.inputs.build_latest }}"
            echo "source=manual_dispatch" >> $GITHUB_OUTPUT
          fi

          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "build_latest=$BUILD_LATEST" >> $GITHUB_OUTPUT
          echo "Building release: $RELEASE_TAG (source: manual/auto)"

      - name: Checkout repository at release tag
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.release_info.outputs.release_tag }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Release Version and Define Image Tags
        id: image_info
        run: |
          # Get release tag name from previous step
          RELEASE_TAG="${{ steps.release_info.outputs.release_tag }}"
          # Remove 'v' prefix if present (v2.7.0 -> 2.7.0)
          VERSION=${RELEASE_TAG#v}

          # Use GitHub owner and repo name for GHCR image path (lowercase)
          OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          REPO_LOWER=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_NAME="ghcr.io/$OWNER_LOWER/$REPO_LOWER"

          # Create timestamp for additional uniqueness
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)

          # Define tags
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "original_tag=nasa-ammos/common-workflow-service:$VERSION" >> $GITHUB_OUTPUT
          echo "ghcr_tag_release=$IMAGE_NAME:$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "ghcr_tag_version=$IMAGE_NAME:$VERSION" >> $GITHUB_OUTPUT
          echo "ghcr_tag_latest=$IMAGE_NAME:latest" >> $GITHUB_OUTPUT
          echo "ghcr_tag_temporal=$IMAGE_NAME:$VERSION-$TIMESTAMP" >> $GITHUB_OUTPUT
          echo "build_latest=${{ steps.release_info.outputs.build_latest }}" >> $GITHUB_OUTPUT

          echo "Building release: $RELEASE_TAG"
          echo "Version: $VERSION"
          echo "Build latest tag: ${{ steps.release_info.outputs.build_latest }}"

      - name: Download Logstash
        run: |
          curl -o install/logging/logstash-8.12.0.zip https://artifacts.elastic.co/downloads/logstash/logstash-8.12.0-windows-x86_64.zip

      - name: Build CWS Docker Image using script
        run: |
          cd ../install/docker/cws-image
          chmod +x build.sh
          # The script builds using the 'nasa-ammos/...' tag internally
          ./build.sh
          if [ $? -ne 0 ]; then
            echo "::error::Docker image build script failed."
            exit 1
          fi

      - name: Tag image for GHCR release
        run: |
          echo "Tagging ${{ steps.image_info.outputs.original_tag }} with release tags..."

          # Tag with original release tag (e.g., v2.7.0)
          docker tag "${{ steps.image_info.outputs.original_tag }}" "${{ steps.image_info.outputs.ghcr_tag_release }}"
          echo "‚úì Tagged: ${{ steps.image_info.outputs.ghcr_tag_release }}"

          # Tag with clean version (e.g., 2.7.0)
          docker tag "${{ steps.image_info.outputs.original_tag }}" "${{ steps.image_info.outputs.ghcr_tag_version }}"
          echo "‚úì Tagged: ${{ steps.image_info.outputs.ghcr_tag_version }}"

          # Temporal tag for uniqueness
          docker tag "${{ steps.image_info.outputs.original_tag }}" "${{ steps.image_info.outputs.ghcr_tag_temporal }}"
          echo "‚úì Tagged: ${{ steps.image_info.outputs.ghcr_tag_temporal }}"

          # Conditionally tag as latest
          if [ "${{ steps.image_info.outputs.build_latest }}" = "true" ]; then
            docker tag "${{ steps.image_info.outputs.original_tag }}" "${{ steps.image_info.outputs.ghcr_tag_latest }}"
            echo "‚úì Tagged: ${{ steps.image_info.outputs.ghcr_tag_latest }}"
          else
            echo "‚è≠ Skipping latest tag"
          fi

      - name: Push Docker images to GHCR
        run: |
          echo "Pushing release images to GHCR..."

          docker push "${{ steps.image_info.outputs.ghcr_tag_release }}"
          echo "‚úì Pushed: ${{ steps.image_info.outputs.ghcr_tag_release }}"

          docker push "${{ steps.image_info.outputs.ghcr_tag_version }}"
          echo "‚úì Pushed: ${{ steps.image_info.outputs.ghcr_tag_version }}"

          docker push "${{ steps.image_info.outputs.ghcr_tag_temporal }}"
          echo "‚úì Pushed: ${{ steps.image_info.outputs.ghcr_tag_temporal }}"

          # Conditionally push latest
          if [ "${{ steps.image_info.outputs.build_latest }}" = "true" ]; then
            docker push "${{ steps.image_info.outputs.ghcr_tag_latest }}"
            echo "‚úì Pushed: ${{ steps.image_info.outputs.ghcr_tag_latest }}"
          fi

      - name: Summary
        run: |
          echo "üéâ Release build complete!"
          echo "Source: ${{ steps.release_info.outputs.source }}"
          echo "Release: ${{ steps.image_info.outputs.release_tag }}"
          echo "Images pushed:"
          echo "  - ${{ steps.image_info.outputs.ghcr_tag_release }}"
          echo "  - ${{ steps.image_info.outputs.ghcr_tag_version }}"
          echo "  - ${{ steps.image_info.outputs.ghcr_tag_temporal }}"
          if [ "${{ steps.image_info.outputs.build_latest }}" = "true" ]; then
            echo "  - ${{ steps.image_info.outputs.ghcr_tag_latest }}"
          fi
