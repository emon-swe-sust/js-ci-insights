name: 'CI+CD Gigapipe'

on:
  workflow_dispatch:
    inputs:
      ref_name:
        description: Release Version
        required: true
      branch:
        description: Release Branch
        type: string
        default: 'master'
        required: true
      release:
        required: true
        type: boolean
  release:
    types: [created]

jobs:
  go_arm64:
    strategy:
      matrix:
        os: [ubuntu-22.04-arm]
    runs-on: ${{ matrix.os }}
    name: 'Build & Publish arm64'
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          ref: ${{ (github.event_name == 'workflow_dispatch') && github.event.inputs.branch || github.ref }}
      - name: build qryn-view
        uses: ./.github/actions/get-view
        env:
          TAG: v3.3.2
      - run: |
          echo "VERSION=${{ (github.event_name == 'workflow_dispatch') && github.event.inputs.ref_name || github.ref_name }}" >> $GITHUB_ENV
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
      - name: build static
        run: |
          go mod tidy
          VIEW=1 CGO_ENABLED=0 go build -ldflags="-extldflags=-static" -o gigapipe_arm64 cmd/gigapipe/main.go

      - name: get NFPM
        if:  github.event_name == 'release' || ${{ inputs.release }}
        run: |
            wget -qO- https://github.com/goreleaser/nfpm/releases/download/v2.41.3/nfpm_2.41.3_Linux_arm64.tar.gz | tar --directory ./ -xz nfpm
            chmod +x nfpm
  
      - name: Create Packages ${{ matrix.goarch }}
        if:  github.event_name == 'release' || ${{ inputs.release }}
        env:
            VERSION: ${{ env.VERSION }}
            PACKAGE: "gigapipe"
            RELEASE: ${{ env.VERSION }}
            ARCH: arm64
            OS: ${{ matrix.goos }}
        run: |
            sed -i 's|v0.0.0|${{ env.VERSION }}|g' nfpm.yaml
            sed -i 's|amd64|arm64|g' nfpm.yaml
            cp gigapipe_arm64 gigapipe
            ./nfpm pkg --config nfpm.yaml --target "./${PACKAGE}_${RELEASE}_${ARCH}.deb"
            ./nfpm pkg --config nfpm.yaml --target "./${PACKAGE}_${RELEASE}_${ARCH}.rpm"
            
      - name: Upload release
        if:  github.event_name == 'release' || ${{ inputs.release }}
        uses: boxpositron/upload-multiple-releases@1.0.7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_config: |
              gigapipe_arm64
              gigapipe*.deb
              gigapipe*.rpm
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }}
          draft: false
          prerelease: false
          overwrite: true
          
  go_amd64:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    name: 'Build & Publish amd64'
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          ref: ${{ (github.event_name == 'workflow_dispatch') && github.event.inputs.branch || github.ref }}
      - name: build qryn-view
        uses: ./.github/actions/get-view
        env:
          TAG: v3.3.2
      - run: |
          echo "VERSION=${{ (github.event_name == 'workflow_dispatch') && github.event.inputs.ref_name || github.ref_name }}" >> $GITHUB_ENV
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
      - name: build static
        run: |
          go mod tidy
          VIEW=1 CGO_ENABLED=0 go build -ldflags="-extldflags=-static" -o gigapipe cmd/gigapipe/main.go
          
      - name: glibc polyfill
        if: ${{ matrix.goarch == 'amd64' }}
        run: |
          CONTAINER_ID=$(docker create ghcr.io/lmangani/polyfill-glibc-action:latest) 
          docker cp $CONTAINER_ID:/usr/local/bin/polyfill-glibc ./polyfill-glibc
          docker rm $CONTAINER_ID
          chmod +x ./polyfill-glibc
          ./polyfill-glibc --target-glibc=2.17 ./gigapipe
          
      - name: get NFPM
        if:  github.event_name == 'release' || ${{ inputs.release }}
        run: |
            wget -qO- https://github.com/goreleaser/nfpm/releases/download/v2.41.3/nfpm_2.41.3_Linux_x86_64.tar.gz | tar --directory ./ -xz nfpm
            chmod +x nfpm
  
      - name: Create Packages ${{ matrix.goarch }}
        if:  github.event_name == 'release' || ${{ inputs.release }}
        env:
            VERSION: ${{ env.VERSION }}
            PACKAGE: "gigapipe"
            RELEASE: ${{ env.VERSION }}
            ARCH: amd64
            OS: ${{ matrix.goos }}
        run: |
            sed -i 's|v0.0.0|${{ env.VERSION }}|g' nfpm.yaml
            ./nfpm pkg --config nfpm.yaml --target "./${PACKAGE}_${RELEASE}_${ARCH}.deb"
            ./nfpm pkg --config nfpm.yaml --target "./${PACKAGE}_${RELEASE}_${ARCH}.rpm"
            
      - name: Upload release
        if:  github.event_name == 'release' || ${{ inputs.release }}
        uses: boxpositron/upload-multiple-releases@1.0.7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_config: |
              gigapipe
              gigapipe*.deb
              gigapipe*.rpm
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }}
          draft: false
          prerelease: false
          overwrite: true
          
  docker:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    name: 'Docker Build & Publish'
    steps:
      - uses: actions/checkout@v4.1.1
        with:
          ref: ${{ (github.event_name == 'workflow_dispatch') && github.event.inputs.branch || github.ref }}
      - name: build qryn-view
        uses: ./.github/actions/get-view
        env:
          TAG: v3.3.2
      - name: Log in to the GHCR registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.10.0
      - name: Build and push to GHCR
        uses: docker/build-push-action@v6.15.0
        with:
          context: "."
          build-args: |
            VIEW=1
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
             ghcr.io/metrico/gigapipe:latest
             ghcr.io/metrico/gigapipe:${{ (github.event_name == 'workflow_dispatch') && github.event.inputs.ref_name || github.ref_name }}
          labels: |
            dev.qryn.image.title=gigapipe
