name: "[Chunithm] Fetch new songs"

on:
  schedule:
    - cron: '0 0-5 * * 3-5'
  workflow_dispatch:

jobs:
  fetch_songs:
    name: Fetch latest song list from SEGA
    runs-on: ubuntu-latest

    steps:
      - name: Set timezone
        uses: szenius/set-timezone@v1.2
        with:
          timezoneLinux: "Asia/Tokyo"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Configure Git user
        run: |
          git config --global user.email "noreply@github.com"
          git config --global user.name "GitHub Actions"

      - name: Checkout existing branch or create new
        run : |
          git fetch origin
          if git show-ref --quiet refs/remotes/origin/chunithm-staging; then
            git switch chunithm-staging
            git rebase origin/master
          else
            git checkout -b chunithm-staging
          fi

          # git pull origin chunithm-staging
          # git push --force --set-upstream origin chunithm-staging

      - name: Run main script and capture output
        id: run_script
        run: |
          {
            echo "OUTPUT_LOG<<EOF"
            python scripts/update-songs.py --chunithm --nocolors --escape --markdown --no_timestamp --no_verbose
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Extract datestamp from script output
        id: extract_date
        run: |
          echo "datestamp=$(cat chunithm/data/music-ex.json | jq '.[-1].date_added | tonumber')" >> "$GITHUB_OUTPUT"
          # Use today's date instead because Chunithm default json doesn't have date data...
          # echo "datestamp=$(date '+%Y%m%d')" >> "$GITHUB_OUTPUT"

      # - name: Check script output
      #   id: check_script
      #   run: |
      #     if [[ "${{ steps.run_script.outputs.OUTPUT_LOG }}" == *"New song added"* ]]; then
      #       echo "New song data downloaded. Creating a pull request."
      #       echo "CREATE_PR=true" >> "$GITHUB_OUTPUT"
      #     else
      #       echo "Nothing updated. Skipping pull request creation."
      #       echo "CREATE_PR=false" >> "$GITHUB_OUTPUT"
      #     fi

      - name: Commit changes
        id: commit_changes
        env:
          UNIQUE_STRING: ${{ github.run_id }}-${{ github.run_attempt }}
        run: |
          git add .

          if output=$(git status --porcelain) && [ -z "$output" ]; then
            echo "HAS_DIFFS=false" >> "$GITHUB_OUTPUT"
            echo "No changes. Skipping PR request"
          else
            git commit -m "data(chunithm): [bot] add song data ${{ steps.extract_date.outputs.DATESTAMP }}"
            git push origin chunithm-staging --force-with-lease
            echo "Commited changes."
            echo "HAS_DIFFS=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout existing PR or create new
        if: steps.commit_changes.outputs.HAS_DIFFS == 'true'
        run: |
          if [[ $(gh pr list --state open --head chunithm-staging | grep chunithm-staging) ]]; then
            echo "PR currently open. Add comment to existing open PR"
            gh pr comment chunithm-staging \
              --body "${{ steps.run_script.outputs.OUTPUT_LOG }}"
          else
            echo "No currently open PR for chunithm-staging. Create new PR"
            gh pr create \
              -B ${{ github.ref_name }} \
              -H "chunithm-staging" \
              --title "[Automation] CHUNITHM: Add new songs (${{ steps.extract_date.outputs.DATESTAMP }})" \
              --body "${{ steps.run_script.outputs.OUTPUT_LOG }}"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
