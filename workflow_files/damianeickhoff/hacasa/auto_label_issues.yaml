name: Auto Label Issues

on:
  issues:
    types: opened

jobs:
  label:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Label issues based on title and body
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const issueTitle = context.payload.issue.title.toLowerCase();
            let issueBody = context.payload.issue.body ? context.payload.issue.body.toLowerCase() : '';
            const labelsToAdd = [];
            const existingLabels = context.payload.issue.labels.map(label => label.name);

            // Remove "frontend version" to avoid false positives
            issueBody = issueBody.replace('frontend version', '');

            // Type Labels (checking body for question, documentation)
            if (issueBody.includes('question') || issueBody.includes('how to')) {
              labelsToAdd.push('question');
            }
            if (issueBody.includes('documentation') || issueBody.includes('docs')) {
              labelsToAdd.push('documentation');
            }

            // Component Labels (checking title)
            if (issueTitle.includes('frontend') || issueTitle.includes('ui')) {
              labelsToAdd.push('Frontend');
            }
            if (issueTitle.includes('backend') || issueTitle.includes('api')) {
              labelsToAdd.push('Backend');
            }
            if (issueTitle.includes('documentation') || issueTitle.includes('docs')) {
              labelsToAdd.push('Documentation');
            }

            // Priority Labels (checking body)
            if (issueBody.includes('critical') || issueBody.includes('urgent') || issueBody.includes('must fix')) {
              labelsToAdd.push('critical');
            }
            if (issueBody.includes('high priority') || issueBody.includes('important')) {
              labelsToAdd.push('high');
            }
            if (issueBody.includes('medium priority') || issueBody.includes('normal')) {
              labelsToAdd.push('medium');
            }
            if (issueBody.includes('low priority') || issueBody.includes('minor')) {
              labelsToAdd.push('low');
            }

            const newLabelsToAdd = labelsToAdd.filter(label => !existingLabels.includes(label));

            if (newLabelsToAdd.length > 0) {
              try {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  labels: newLabelsToAdd
                });
                console.log('Added labels:', newLabelsToAdd);
              } catch (error) {
                console.error('Failed to add labels:', error);
              }
            } else {
              console.log('No new labels to add based on the defined criteria.');
            }
