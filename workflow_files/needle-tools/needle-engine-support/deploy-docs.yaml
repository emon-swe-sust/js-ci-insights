name: deploy docs

on:
  # trigger deployment on every push to main branch
  push:
    branches: [main]
  repository_dispatch:
    types: [updated_docs]
  discussion:
    types: [created, edited, deleted, labeled, unlabeled, category_changed]
  schedule:
    - cron: '0 0 * * 0' # every Sunday at midnight UTC

jobs: 

  docs:
    # https://github.com/orgs/community/discussions/25641
    # https://github.com/orgs/community/discussions/25389
    # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#discussion
    # https://docs.github.com/en/webhooks-and-events/webhooks/webhook-events-and-payloads#discussion
    if: |
      github.event_name == 'push' ||
      github.event_name == 'repository_dispatch' ||
      (github.event_name == 'discussion' && github.event.discussion.category.name == 'Share')

    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v2
        with:
          # fetch all commits to get last updated time or other git log info
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          # choose node.js version to use
          node-version: '20.15'

      # install dependencies if the cache did not hit
      - name: Install dependencies
        # if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: npm install

      # run build script
      - name: Build VuePress site
        run: npm run docs:build
        env:
          # @see https://docs.github.com/en/actions/reference/authentication-in-a-workflow#about-the-github_token-secret
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # deploy to FTP
      - name: Deploy to FTP
        run: npm run docs:deploy
        env:
          # @see https://docs.github.com/en/actions/reference/authentication-in-a-workflow#about-the-github_token-secret
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FTP_SERVER_NAME: ${{ secrets.FTP_SERVER }}
          FTP_SERVER_USERNAME: "f0152dc5"
          FTP_SERVER_PASSWORD: ${{ secrets.FTP_PASSWORD }}

    
  notify_discord:
    needs: docs
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' ||
      github.event_name == 'repository_dispatch'
    steps:
      - uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.DEPLOY_DISCORD_WEBHOOK }}
          username: "Deploy Docs ðŸ¤–"
          content: "Docs have been updated â†’ <https://engine.needle.tools/docs/>\n`${{ github.event.head_commit.message }}${{github.event.client_payload.reason}}`"
  
  notify_discord_if_upload_fails:
    needs: docs
    runs-on: ubuntu-latest
    if: |
      failure() &&
      (github.event_name == 'push' || github.event_name == 'repository_dispatch')
    steps:
      - uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.DEPLOY_DISCORD_WEBHOOK }}
          username: "Deploy Docs (Error) ðŸ¤–"
          content: "Docs have **failed** to update:\n<https://github.com/needle-tools/needle-engine-support/actions/runs/${{ github.run_id }}>\n`${{ github.event.head_commit.message }}${{github.event.client_payload.reason}}`"


  notify_discord_by_contribution:
    needs: docs
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'discussion' && (github.event.action == 'created' || github.event.action == 'edited') && github.event.discussion.category.name == 'Share')
    steps:
      - uses: tsickert/discord-webhook@v5.3.0
        with:
          webhook-url: ${{ secrets.DEPLOY_DISCORD_WEBHOOK }}
          username: "Deploy Docs (Contribution) ðŸ¤–"
          content: "Docs have been updated â†’ <https://engine.needle.tools/docs/community/contributions> by discussion:\n<${{ github.event.discussion.html_url}}>"




  check_links:
    needs: docs
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          # fetch all commits to get last updated time or other git log info
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          # choose node.js version to use
          node-version: '20.15'

      - name: Install dependencies
        run: npm install

      - name: Test Links
        run: npm run test:links
        timeout-minutes: 10
        env:
          DEPLOY_DISCORD_WEBHOOK: ${{ secrets.DEPLOY_DISCORD_WEBHOOK }}
