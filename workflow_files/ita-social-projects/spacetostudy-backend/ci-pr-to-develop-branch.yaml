name: PR (develop)

on:
  pull_request:
    branches: ['develop']

jobs:
  run-lint:
    name: Run ESLint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: |
          npm run lint:check 2>&1 | \
          # generate full-lint.log
          tee "full-lint.log"
          # save exit code
          exit_code="${PIPESTATUS[0]}"
          # parsing and generate summary-lint-errors.log
          grep -E '^\[warn\]|^Error:|^Warning:' "full-lint.log" > "summary-lint-errors.log" || \
          echo "No lint errors found." > "summary-lint-errors.log"
          # execute exit code
          exit "$exit_code"

      - name: Upload full-lint.log
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: lint-results
          path: |
            # full-lint.log
            full-lint.log
            # summary-lint-errors.log
            summary-lint-errors.log

  run-tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: ['run-lint']
    strategy:
      matrix:
        node-version: ['22.x'] # NodeJS version   | Use this to test new NodeJS versions
        mongodb-version: ['8.0'] # MongoDB version  | Use this to test new MongoDB versions
      max-parallel: 1 # The maximum number of jobs run in parallel
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install MongoDB ${{ matrix.mongodb-version }}
        uses: supercharge/mongodb-github-action@1.12.0
        with:
          mongodb-version: ${{ matrix.mongodb-version }}
          mongodb-db: ${{ secrets.MONGODB_DB }}
          mongodb-username: ${{ secrets.MONGODB_USER }}
          mongodb-password: ${{ secrets.MONGODB_PASS }}
          mongodb-port: 27017

      - name: Install MongoDB shell
        run: |
          sudo apt-get install -y gnupg curl
          curl -fsSL https://www.mongodb.org/static/pgp/server-8.0.asc | \
          sudo gpg -o /usr/share/keyrings/mongodb-server-8.0.gpg \
          --dearmor
          echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-8.0.gpg ] https://repo.mongodb.org/apt/ubuntu $(lsb_release -cs)/mongodb-org/8.0 multiverse" | \
          sudo tee /etc/apt/sources.list.d/mongodb-org-8.0.list
          sudo apt-get update && sudo apt-get install -y mongodb-mongosh

      - name: Check MongoDB
        run: |
          for i in {1..30}; do
            mongosh --eval "db.runCommand({ ping: 1 })" localhost:27017 && echo "MongoDB is up (attempt $i)" && exit 0
            echo "Waiting for MongoDB... (attempt $i)"
            sleep 2
          done
          echo "MongoDB did not start in time!" && exit 1

      - name: Install dependencies
        run: npm ci

      - name: Run tests and generate logs
        run: |
          npm run test -- --ci 2>&1 | \
          # generate full-tests-results.log
          tee "full-tests-results-${{ matrix.node-version }}-${{ matrix.mongodb-version }}.log"
          # save exit code
          exit_code="${PIPESTATUS[0]}"
          # parsing and generate summary-tests-results.log 
          grep -E "Test Suites:|Tests:|Snapshots:|Time:" "full-tests-results-${{ matrix.node-version }}-${{ matrix.mongodb-version }}.log" > \
          "summary-tests-results-${{ matrix.node-version }}-${{ matrix.mongodb-version }}.log"
          # parsing and generate summary-tests-errors.log
          awk '/Summary of all failing tests/,/Test Suites/{if ($0 !~ /Test Suites/) print}' "full-tests-results-${{ matrix.node-version }}-${{ matrix.mongodb-version }}.log" > \
          "summary-tests-errors-${{ matrix.node-version }}-${{ matrix.mongodb-version }}.log"
          # enter exit code
          exit "$exit_code"
        env:
          NODE_OPTIONS: --max_old_space_size=4096
          MONGODB_URL: mongodb://${{ secrets.MONGODB_USER }}:${{ secrets.MONGODB_PASS }}@localhost:27017/${{ secrets.MONGODB_DB }}?authSource=admin
          MONGODB_URL_READONLY_TEST: ${{ secrets.MONGODB_URL_READONLY_TEST }}
          JWT_ACCESS_SECRET: ${{ secrets.JWT_ACCESS_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
          JWT_RESET_SECRET: ${{ secrets.JWT_RESET_SECRET }}
          JWT_CONFIRM_SECRET: ${{ secrets.JWT_CONFIRM_SECRET }}
          JWT_ACCESS_EXPIRES_IN: ${{ secrets.JWT_ACCESS_EXPIRES_IN }}
          JWT_REFRESH_EXPIRES_IN: ${{ secrets.JWT_REFRESH_EXPIRES_IN }}
          JWT_REFRESH_LONG_TERM_EXPIRES_IN: ${{ secrets.JWT_REFRESH_LONG_TERM_EXPIRES_IN }}
          JWT_RESET_EXPIRES_IN: ${{ secrets.JWT_RESET_EXPIRES_IN }}
          JWT_CONFIRM_EXPIRES_IN: ${{ secrets.JWT_CONFIRM_EXPIRES_IN }}
          CLIENT_URL: ${{ secrets.CLIENT_URL }}
          SERVER_URL: ${{ secrets.SERVER_URL }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          MAIL_USER: ${{ secrets.MAIL_USER }}
          MAIL_PASS: ${{ secrets.MAIL_PASS }}
          MAIL_FIRSTNAME: ${{ secrets.MAIL_FIRSTNAME }}
          MAIL_LASTNAME: ${{ secrets.MAIL_LASTNAME }}
          GMAIL_CLIENT_ID: ${{ secrets.GMAIL_CLIENT_ID }}
          GMAIL_CLIENT_SECRET: ${{ secrets.GMAIL_CLIENT_SECRET }}
          GMAIL_REFRESH_TOKEN: ${{ secrets.GMAIL_REFRESH_TOKEN }}
          GMAIL_REDIRECT_URI: ${{ secrets.GMAIL_REDIRECT_URI }}
          COOKIE_DOMAIN: ${{ secrets.COOKIE_DOMAIN }}
          TEST_ADMIN_EMAIL: ${{ secrets.TEST_ADMIN_EMAIL }}
          TEST_ADMIN_PASSWORD: ${{ secrets.TEST_ADMIN_PASSWORD }}
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        if: success() || failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Upload Test Logs
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: tests-results-${{ matrix.node-version }}-${{ matrix.mongodb-version }}
          path: |
            # full-tests-results.log
            full-tests-results-${{ matrix.node-version }}-${{ matrix.mongodb-version }}.log
            # summary-tests-results.log
            summary-tests-results-${{ matrix.node-version }}-${{ matrix.mongodb-version }}.log
            # summary-tests-errors.log
            summary-tests-errors-${{ matrix.node-version }}-${{ matrix.mongodb-version }}.log

  docker-build-test:
    name: Build & Test Docker Container
    runs-on: ubuntu-latest
    needs: ['run-lint']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t be-app .

      - name: Run MongoDB container
        run: |
          docker run -d --name mongodb -p 27017:27017 \
            -e MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGODB_USER }} \
            -e MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGODB_PASS }} \
            -e MONGO_INITDB_DATABASE=${{ secrets.MONGODB_DB }} \
            mongo:8.0.3-noble

      - name: Run Application Container
        run: |
          docker run -d --name be-app -p 8080:8080 \
            -e MONGODB_USER=${{ secrets.MONGODB_USER }} \
            -e MONGODB_PASS=${{ secrets.MONGODB_PASS }} \
            -e MONGODB_DB=${{ secrets.MONGODB_DB }} \
            -e MONGODB_URL=${{ secrets.MONGODB_URL_DOCKER }} \
            -e JWT_ACCESS_SECRET=${{ secrets.JWT_ACCESS_SECRET }} \
            -e JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }} \
            -e JWT_RESET_SECRET=${{ secrets.JWT_RESET_SECRET }} \
            -e JWT_CONFIRM_SECRET=${{ secrets.JWT_CONFIRM_SECRET }} \
            -e JWT_ACCESS_EXPIRES_IN=${{ secrets.JWT_ACCESS_EXPIRES_IN }} \
            -e JWT_REFRESH_EXPIRES_IN=${{ secrets.JWT_REFRESH_EXPIRES_IN }} \
            -e JWT_RESET_EXPIRES_IN=${{ secrets.JWT_RESET_EXPIRES_IN }} \
            -e JWT_CONFIRM_EXPIRES_IN=${{ secrets.JWT_CONFIRM_EXPIRES_IN }} \
            -e CLIENT_URL=${{ secrets.CLIENT_URL }} \
            -e SERVER_URL=${{ secrets.SERVER_URL }} \
            -e SERVER_PORT=${{ secrets.SERVER_PORT }} \
            -e MAIL_USER=${{ secrets.MAIL_USER }} \
            -e MAIL_PASS=${{ secrets.MAIL_PASS }} \
            -e MAIL_FIRSTNAME=${{ secrets.MAIL_FIRSTNAME }} \
            -e MAIL_LASTNAME=${{ secrets.MAIL_LASTNAME }} \
            -e GMAIL_CLIENT_ID=${{ secrets.GMAIL_CLIENT_ID }} \
            -e GMAIL_CLIENT_SECRET=${{ secrets.GMAIL_CLIENT_SECRET }} \
            -e GMAIL_REFRESH_TOKEN=${{ secrets.GMAIL_REFRESH_TOKEN }} \
            -e GMAIL_REDIRECT_URI=${{ secrets.GMAIL_REDIRECT_URI }} \
            -e COOKIE_DOMAIN=${{ secrets.COOKIE_DOMAIN }} \
            --link mongodb be-app

      - name: API Health Check and Report
        if: success() || failure()
        run: |
          sleep 10
          RESPONSE=$(curl --insecure --silent --request GET --url 'http://localhost:8080/users/')
          EXPECTED='{"status":401,"code":"UNAUTHORIZED","message":"The requested URL requires user authorization."}'

          if [[ "$RESPONSE" == "$EXPECTED" ]]; then
            echo "✅ No containerization issues detected." | tee -a docker-results.log
          else
            echo "❌ Potential containerization issue detected!" | tee -a docker-results.log
            echo "::error ::Potential containerization issue detected!"
          fi

      - name: Upload Docker Health Check Results
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: docker-health-check
          path: docker-results.log

  generate-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: ['run-lint', 'run-tests', 'docker-build-test']
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: Generate Test Report
        run: |
          CI_MARKER="# ✅ CI Report - $(TZ="Europe/Kyiv" date +"%H:%M %d/%m/%Y")"
          {
            echo "$CI_MARKER"
            echo ""
          } > report.txt

          # 📝 Lint Report
          {
            echo "## 📝 Lint Report"
            echo ""

            SUMMARY_FILE="all-artifacts/lint-results/summary-lint-errors.log"

            if [[ -f "$SUMMARY_FILE" ]]; then
              if grep -q -E '^\[warn\]|^Error:' "$SUMMARY_FILE"; then
                echo "**❌ Lint Errors Found:**"
                echo '```'
                cat "$SUMMARY_FILE"
                echo '```'
              else
                echo '```'
                echo "✅ No lint issues found."
                echo '```'
              fi
            else
              echo "⚠️ Lint report not found."
            fi

            printf "\n"
          } >> report.txt

          # 🧪 Test Reports
          TEST_REPORTS_FOUND=false
          {
            echo "## 🧪 Test Results"
            echo ""

            for folder in $(find all-artifacts -type d -name "tests-results-*"); do
              TEST_REPORTS_FOUND=true
              TEST_VERSION=$(basename "$folder")
              NODE_VERSION=$(echo "$TEST_VERSION" | cut -d'-' -f3)
              MONGO_VERSION=$(echo "$TEST_VERSION" | cut -d'-' -f4)

              SUMMARY_FILE="$folder/summary-tests-results-${NODE_VERSION}-${MONGO_VERSION}.log"
              ERRORS_FILE="$folder/summary-tests-errors-${NODE_VERSION}-${MONGO_VERSION}.log"

              echo "**🔹 Node.js Version:** $NODE_VERSION"
              echo "**🔹 MongoDB Version:** $MONGO_VERSION"
              echo ""

              if [[ -f "$SUMMARY_FILE" ]]; then
                echo "**Test Summary:**"
                echo '```'
                cat "$SUMMARY_FILE"
                echo '```'
              else
                echo "⚠️ No test summary available."
              fi

              if [[ -s "$ERRORS_FILE" ]]; then
                echo "**❌ Test Errors:**"
                echo '```'
                cat "$ERRORS_FILE"
                echo '```'
              fi

              echo ""
            done

            if [[ "$TEST_REPORTS_FOUND" == false ]]; then
              echo "⚠️ No test results available."
            fi

            echo ""
          } >> report.txt

          # 🐳 Docker Health Check
          {
            echo "## 🐳 Docker Health Check"
            echo ""

            DOCKER_LOG="all-artifacts/docker-health-check/docker-results.log"
            if [[ -f "$DOCKER_LOG" ]]; then
              echo "**Health Check Results:**"
              echo '```'
              cat "$DOCKER_LOG"
              echo '```'
            else
              echo "⚠️ No Docker health check results available."
            fi

            echo ""
          } >> report.txt

      - name: Publish Report in GitHub Actions Summary
        run: cat report.txt >> "$GITHUB_STEP_SUMMARY"

      - name: Update CI Report in PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          if [[ -z "$PR_NUMBER" ]]; then
            echo "No PR associated, skipping update."
            exit 0
          fi

          COMMENT_ID=$(gh api "repos/:owner/:repo/issues/$PR_NUMBER/comments" --jq '.[] | select(.user.login=="github-actions[bot]") | select(.body | contains("# ✅ CI Report")) | .id')

          if [[ -n "$COMMENT_ID" ]]; then
            echo "Updating existing CI report comment: $COMMENT_ID"
            gh api "repos/:owner/:repo/issues/comments/$COMMENT_ID" -X PATCH -f body="$(cat report.txt)"
          else
            echo "No previous CI report found, creating a new one..."
            gh pr comment "$PR_NUMBER" --body-file "report.txt"
          fi
